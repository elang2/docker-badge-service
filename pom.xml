<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
     <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>1.5.2.RELEASE</version>
    </parent>
    
	<groupId>com.elan.badge</groupId>
	<artifactId>badge-service-impl</artifactId>
    <packaging>war</packaging>
    <version>0.0.10-SNAPSHOT</version>
    <name>badge-service-impl</name>

    <properties>
        <el.api.version>3.0.0</el.api.version>
        <rx.java.version>1.1.9</rx.java.version>
        <commons.lang.version>3.4</commons.lang.version>
        <singles.business.version>45</singles.business.version>
        <metrics.lib.version>3.1.0</metrics.lib.version>
        <jersey.media.json.version>2.22.1</jersey.media.json.version>
        <jersey-container-servlet.version>2.22.2</jersey-container-servlet.version>
        <hk2.utils.version>2.4.0-b34</hk2.utils.version>
        <spring.data.redis.version>1.7.5.RELEASE</spring.data.redis.version>
        <jedis.version>2.8.0</jedis.version>
         <maven-spring-boot.plugin.version>1.5.2.RELEASE</maven-spring-boot.plugin.version>
            <java.version>1.8</java.version>
            <jetty.version>9.2.10.v20150310</jetty.version>
            <maven-extra-enforcer-rules.version>1.0-alpha-3</maven-extra-enforcer-rules.version>
            <maven.build.timestamp.format>dd/MM/yyyy hh:mm:ss a</maven.build.timestamp.format>
            <timestamp>${maven.build.timestamp}</timestamp>
            <maven.enforcer.plugin.version>1.3.1</maven.enforcer.plugin.version>
            <maven.javadoc.plugin>2.10.3</maven.javadoc.plugin>
            <metrics.version>3.1.0</metrics.version>
            <jersey.spring.version>2.25.1</jersey.spring.version>
            <push.image>false</push.image>
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>

        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jetty</artifactId>
            <scope>provided</scope>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <dependency>
            <groupId>javax.el</groupId>
            <artifactId>javax.el-api</artifactId>
            <version>${el.api.version}</version>
        </dependency>

        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons.lang.version}</version>
        </dependency>

        <dependency>
            <groupId>io.reactivex</groupId>
            <artifactId>rxjava</artifactId>
            <version>${rx.java.version}</version>
        </dependency>
        
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-redis</artifactId>
            <version>${spring.data.redis.version}</version>
        </dependency>

        <dependency>
            <groupId>com.ryantenney.metrics</groupId>
            <artifactId>metrics-spring</artifactId>
            <version>${metrics.lib.version}</version>
        </dependency>

        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-graphite</artifactId>
            <version>${metrics.lib.version}</version>
        </dependency>

        <dependency>
            <groupId>io.dropwizard.metrics</groupId>
            <artifactId>metrics-jvm</artifactId>
            <version>${metrics.lib.version}</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-json-jackson</artifactId>
            <version>${jersey.media.json.version}</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish.hk2</groupId>
            <artifactId>hk2-utils</artifactId>
            <version>${hk2.utils.version}</version>
        </dependency>

        <dependency>
            <groupId>org.glassfish.jersey.containers</groupId>
            <artifactId>jersey-container-servlet</artifactId>
            <version>${jersey-container-servlet.version}</version>
        </dependency>
        
        <dependency>
            <groupId>redis.clients</groupId>
            <artifactId>jedis</artifactId>
            <version>${jedis.version}</version>
        </dependency>
        
         <dependency>
                <groupId>org.glassfish.jersey.ext</groupId>
                <artifactId>jersey-spring3</artifactId>
                <exclusions>
                    <exclusion>
                        <groupId>org.glassfish.hk2.external</groupId>
                        <artifactId>asm-all-repackaged</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${maven-spring-boot.plugin.version}</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>repackage</goal>
                            <goal>build-info</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <addResources>true</addResources>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <version>${maven.enforcer.plugin.version}</version>
                <executions>
                    <execution>
                        <id>enforce-ban-duplicate-classes</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[3.0.0,)</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>1.8</version>
                                </requireJavaVersion>
                                <banDuplicateClasses>
                                    <ignoreClasses>
                                    </ignoreClasses>
                                    <findAllDuplicates>true</findAllDuplicates>
                                </banDuplicateClasses>
                            </rules>
                            <fail>true</fail>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.codehaus.mojo</groupId>
                        <artifactId>extra-enforcer-rules</artifactId>
                        <version>${maven-extra-enforcer-rules.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>${maven.javadoc.plugin}</version>
                <configuration>
                    <show>private</show>
                    <nohelp>true</nohelp>
                </configuration>
            </plugin>
        </plugins>
        <resources>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
        
    </build>
    
    
        <profiles>
        <!--
            This profile builds a Docker image with the Spring Boot application.
            Before being able to build a Docker image using Maven, the environment
            variable DOCKER_HOME need to be set to the endpoint of the local
            Docker API.
            Example *nix: export set DOCKER_HOME=http://localhost:2375
            The Docker image is built using the following command:
            mvn -Pdockerimage package

            If a Docker image with the image name and tag (project version) already
            exists then one of the following may happen depending on the
            environment in which the build is run:
            - The existing image is given the image name and tag <none>.
            - No new Docker image is generated, but the existing image is retained.
            The suggested approach is to first delete any existing Docker image
            using the following Maven command before generating a new image:
            mvn -Pdockerimage clean
        -->
        <profile>
            <id>dockerimage</id>
            <dependencies>
                <!--
                    Here you declare dependencies to additional artifacts that
                    are to be copied into the Docker image.
                    No need to add a dependency to the Spring Boot application JAR
                    file here.
                -->
            </dependencies>
            <properties>
                <!-- Name of Docker image that will be built. -->
                <docker.image.name>badge-service</docker.image.name>
                <!--
                    Directory that holds Docker file and static content
                    necessary to build the Docker image.
                -->
                <docker.image.src.root>src/main/resources/docker</docker.image.src.root>
                <!--
                    Directory to which the Docker image artifacts and the Docker
                    file will be copied to and which will serve as the root directory
                    when building the Docker image.
                -->
                <docker.build.directory>${project.build.directory}/docker</docker.build.directory>
            </properties>
            <build>
                <plugins>
                    <!--
                        Copy the directory containing static content to build directory.
                    -->
                    <plugin>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-resources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <outputDirectory>${docker.build.directory}</outputDirectory>
                                    <resources>
                                        <resource>
                                            <directory>${docker.image.src.root}</directory>
                                            <filtering>false</filtering>
                                        </resource>
                                    </resources>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!--
                        Copy the JAR file containing the Spring Boot application
                        to the application/lib directory.
                    -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <!--
                                                Specify groupId, artifactId, version and type for the
                                                artifact you want to package in the Docker image.
                                                In the case of a Spring Boot application, these are
                                                the same as the project group id, artifact id
                                                and version.
                                            -->
                                            <groupId>${project.groupId}</groupId>
                                            <artifactId>${project.artifactId}</artifactId>
                                            <version>${project.version}</version>
                                            <type>war</type>
                                            <overWrite>true</overWrite>
                                            <outputDirectory>${docker.build.directory}/application/lib</outputDirectory>
                                            <!--
                                                Specify the destination name as to have one and the same name
                                                to refer to in the Docker file.
                                            -->
                                            <destFileName>badge-service.war</destFileName>
                                        </artifactItem>
                                        <!-- Add additional artifacts to be packaged in the Docker image here. -->

                                    </artifactItems>
                                    <outputDirectory>${docker.build.directory}</outputDirectory>
                                    <overWriteReleases>true</overWriteReleases>
                                    <overWriteSnapshots>true</overWriteSnapshots>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                        Remove any existing Docker image with the image name
                        and image tag (project version) configured in the properties.
                    -->
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <version>1.0.0</version>
                        <executions>
                            <execution>
                                <id>remove-image</id>
                                <phase>clean</phase>
                                <goals>
                                    <goal>removeImage</goal>
                                </goals>
                                <configuration>
                                    <imageName>${docker.image.name}</imageName>
                                    <imageTags>
                                        <imageTag>${project.version}</imageTag>
                                    </imageTags>
                                    <verbose>true</verbose>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>

                    <!--
                        Build the Docker image.
                    -->
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>dockerfile-maven-plugin</artifactId>
                        <version>1.3.7</version>
                        <executions>
                            <execution>
                                <id>default</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                        </executions>
                        <configuration>
                            <contextDirectory>${project.build.directory}/docker</contextDirectory>
                            <writeTestMetadata>false</writeTestMetadata>
                            <dockerInfoDirectory></dockerInfoDirectory>
                            <verbose>true</verbose>
                            <forceCreation>true</forceCreation>
                            <imageName>${docker.image.name}</imageName>
                            <repository>${docker.image.name}</repository>
                            <tag>${project.version}</tag>
                            <forceTags>true</forceTags>
                            <pullNewerImage>false</pullNewerImage>
                            <imageTags>
                                <imageTag>${project.version}</imageTag>
                            </imageTags>
                            <dockerDirectory>${project.build.directory}/docker</dockerDirectory>
                            <pushImage>${push.image}</pushImage>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    
</project>
